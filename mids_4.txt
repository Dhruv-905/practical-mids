import numpy as np
from scipy.spatial.distance import euclidean

def k_means_clustering(points, initial_centroids, max_iterations=100, tol=1e-4):
	centroids = initial_centroids.copy()
	clusters = {0: [], 1: []}

	for _ in range(max_iterations):
		new_clusters = {0: [], 1: []}

		for point in points:
			distances = [euclidean(point, centroids[i]) for i in range(2)]
			cluster_idx = np.argmin(distances)
			new_clusters[cluster_idx].append(point)

		new_centroids = [np.mean(new_clusters[i], axis=0) if new_clusters[i] else centroids[i] for i in range(2)]

		if all(euclidean(centroids[i], new_centroids[i]) < tol for i in range(2)):
			break
		centroids = new_centroids
		clusters = new_clusters
	return clusters, centroids

points = np.array([
	[0.1, 0.6],
	[0.15, 0.71],
	[0.08, 0.9],
	[0.16, 0.85],
	[0.2, 0.3],
	[0.25, 0.5],
	[0.24, 0.1],
	[0.3, 0.2]
])

initial_centroids = [points[0], points[7]]

clusters, final_centroids = k_means_clustering(points, initial_centroids)

print("Final Clusters:")
for i, cluster in clusters.items():
	print(f"Cluster {i+1}: {cluster}")
print("\nFinal Centroids:")
for i, centroid in enumerate(final_centroids):
	print(f"Centroid {i+1}: {centroid}")

P6 = [0.25, 0.5]
for i, cluster in clusters.items():
	if any(np.allclose(p, P6) for p in cluster):
		print(f"\nP6 belongs to Cluster {i+1}")
		break

print(f"\nNumber of points in Cluster 1: {len(clusters[0])}")
print(f"\nNumber of points in Cluster 2: {len(clusters[1])}")

population_C2 = len(clusters[1])
print(f"\n2] Population of cluster around m2: {population_C2}")

print(f"\n3] Updated values of centroids: \n m1: {final_centroids[0]} \n m2: {final_centroids[1]}")